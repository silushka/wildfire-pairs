{"version":3,"sources":["components/PlayAgainButton/PlayAgainButton.tsx","components/Card/Card.tsx","components/Hand/Hand.tsx","components/Player/Player.tsx","components/PlayerList/PlayerList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PlayAgainButton","onClick","className","type","Card","card","pairIndex","split","suit","cardValue","src","replace","classNames","pair0","pair1","alt","Hand","hand","pairs","map","findIndex","pair","key","countCards","reduce","counter","Player","name","winner","onSetPairs","useEffect","length","countedCards","cards","Object","entries","filter","winning","PlayerList","players","player","App","props","playAgain","makeHands","setPairs","setState","state","getPairsCount","parseCards","allCards","SUITS","forEach","CARDS","push","availableCards","playersWithHand","makeHand","cardsLeft","i","getRandomCard","index","ac","CARDS_IN_HAND","randomIndex","getRandomInt","min","max","Math","floor","random","this","PureComponent","Boolean","window","location","hostname","match","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fbd559f0.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport './PlayAgainButton.scss';\n\nexport interface IPlayAgainButtonProps {\n  onClick: () => void;\n}\n\nexport const PlayAgainButton: FC<IPlayAgainButtonProps> = ({ onClick }) => {\n  return (\n    <section className=\"buttons\">\n      <button type=\"button\" onClick={ onClick }>\n        Play Again\n      </button>\n    </section>\n  );\n};\n","import classNames from 'classnames';\nimport React, { FC } from 'react';\nimport './Card.scss';\n\nconst cardBaseURL = 'http://h3h.net/images/cards/{suit}_{card}.svg';\n\nexport interface ICardProps {\n  card: string;\n  pairIndex: number;\n}\n\nexport const Card: FC<ICardProps> = ({ card, pairIndex }) => {\n  const [suit, cardValue] = card.split('_');\n  const src = cardBaseURL.replace('{suit}', suit).replace('{card}', cardValue);\n  const className = classNames(\n    'card',\n    {\n      pair0: pairIndex === 0,\n      pair1: pairIndex === 1,\n    },\n  );\n\n  return (\n    <img className={ className } src={ src } alt={ card } />\n  );\n};\n","import React, { FC } from 'react';\nimport { Card } from '../Card/Card';\n\nexport interface IHandProps {\n  hand: string[];\n  pairs: string[] | null;\n}\n\nexport const Hand: FC<IHandProps> = ({ hand, pairs }) => {\n  return (\n    <>\n      { hand.map((card) => {\n        const cardValue = card.split('_')[1];\n        const pairIndex = pairs ? pairs.findIndex(pair => pair === cardValue) : -1;\n\n        return (\n          <Card card={ card } key={ card } pairIndex={ pairIndex } />\n        );\n      }) }\n    </>\n  );\n};\n","import classNames from 'classnames';\nimport React, { FC, useEffect } from 'react';\nimport { SetPairsFn, Winner } from '../../App';\nimport { Hand } from '../Hand/Hand';\nimport './Player.scss';\n\nexport interface IPlayer {\n  name: string;\n  hand: string[];\n  pairs: string[] | null;\n}\n\nexport interface IPlayerProps extends IPlayer {\n  winner: Winner;\n  onSetPairs: SetPairsFn;\n}\n\nexport type CountedCards = Record<string, number>;\n\nconst countCards = (hand: IPlayer['hand']): CountedCards => {\n  return hand.reduce<CountedCards>((counter, card) => {\n    const cardValue = card.split('_')[1];\n\n    return {\n      ...counter,\n      [cardValue]: (counter[cardValue] || 0) + 1,\n    };\n  }, {});\n};\n\nconst getPairs = (cards: CountedCards): string[] => {\n  return Object.entries(cards).filter(([card, count]) => count > 1).map(([card]) => card);\n};\n\nexport const Player: FC<IPlayerProps> = ({ name, hand, winner, pairs, onSetPairs }) => {\n  useEffect(() => {\n    if (!pairs && hand.length) {\n      const countedCards = countCards(hand);\n      onSetPairs(name, getPairs(countedCards));\n    }\n  });\n\n  const className = classNames('hand', { winning: winner === name });\n\n  return (\n    <section className={ className }>\n      <h1>{ name }</h1>\n      <Hand hand={ hand } pairs={ pairs } />\n    </section>\n  );\n};\n","import React, { FC } from 'react';\nimport { SetPairsFn, Winner } from '../../App';\nimport { IPlayer, Player } from '../Player/Player';\n\nexport interface IPlayerListProps {\n  players: IPlayer[];\n  winner: Winner;\n  onSetPairs: SetPairsFn;\n}\n\nexport const PlayerList: FC<IPlayerListProps> = ({ players, winner, onSetPairs }) => {\n  return (\n    <>\n      { players.map((player) => (\n        <Player { ...player } winner={ winner } onSetPairs={ onSetPairs } key={ player.name } />\n      )) }\n    </>\n  );\n};\n","import React, { PureComponent } from 'react';\nimport './App.scss';\nimport { PlayAgainButton } from './components/PlayAgainButton/PlayAgainButton';\nimport { IPlayer } from './components/Player/Player';\nimport { PlayerList } from './components/PlayerList/PlayerList';\n\nexport type SetPairsFn = (name: IPlayer['name'], pairs: IPlayer['pairs']) => void;\nexport type Winner = IPlayer['name'] | null;\n\nexport interface IAppState {\n  cards: string[];\n  players: IPlayer[];\n  winner: Winner;\n}\n\nexport class App extends PureComponent<{}, IAppState> {\n\n  static readonly SUITS = ['spade', 'heart', 'diamond', 'club'];\n  static readonly CARDS = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];\n  static readonly CARDS_IN_HAND = 5;\n\n  constructor(props: Readonly<{}>) {\n    super(props);\n\n    this.state = {\n      cards: this.parseCards(),\n      players: [\n        {\n          name: 'Player 1',\n          hand: [],\n          pairs: null,\n        },\n        {\n          name: 'Player 2',\n          hand: [],\n          pairs: null,\n        },\n      ],\n      winner: null,\n    };\n  }\n\n  componentDidMount(): void {\n    this.makeHands();\n  }\n\n  playAgain = (): void => {\n    this.makeHands();\n  };\n\n  setPairs: SetPairsFn = (name, pairs) => {\n    this.setState((state) => {\n      const players = state.players.map((player) => {\n        if (player.name === name) {\n          return {\n            ...player,\n            pairs,\n          };\n        }\n\n        return player;\n      });\n\n      let winner: Winner = null;\n\n      if (this.getPairsCount(players[0].pairs) > this.getPairsCount(players[1].pairs)) {\n        winner = players[0].name;\n      }\n\n      if (this.getPairsCount(players[1].pairs) > this.getPairsCount(players[0].pairs)) {\n        winner = players[1].name;\n      }\n\n      return {\n        players,\n        winner,\n      };\n    });\n  };\n\n  render() {\n    const { players, winner } = this.state;\n\n    return (\n      <div className=\"app\">\n        <PlayerList players={ players } winner={ winner } onSetPairs={ this.setPairs } />\n        <PlayAgainButton onClick={ this.playAgain } />\n      </div>\n    );\n  }\n\n  private parseCards = (): IAppState['cards'] => {\n    const allCards: IAppState['cards'] = [];\n\n    App.SUITS.forEach((suit) => {\n      App.CARDS.forEach((card) => {\n        allCards.push(`${ suit }_${ card }`);\n      });\n    });\n\n    return allCards;\n  };\n\n  private makeHands = (): void => {\n    let availableCards = this.state.cards;\n\n    const playersWithHand = this.state.players.map((player) => {\n      const [hand, cardsLeft] = this.makeHand(availableCards);\n      availableCards = cardsLeft;\n\n      return {\n        ...player,\n        hand,\n        pairs: null,\n      };\n    });\n\n    this.setState(() => ({\n      players: playersWithHand,\n      winner: null,\n    }));\n  };\n\n  private makeHand = (availableCards: IAppState['cards']): [IPlayer['hand'], IAppState['cards']] => {\n    let cardsLeft = availableCards;\n    const hand: IPlayer['hand'] = [];\n\n    for (let i = 0; i < App.CARDS_IN_HAND; i++) {\n      const [card, index] = this.getRandomCard(cardsLeft);\n      cardsLeft = cardsLeft.filter((ac, i) => i !== index);\n      hand.push(card);\n    }\n\n    return [hand, cardsLeft];\n  };\n\n  private getRandomCard = (availableCards: IAppState['cards']): [IAppState['cards'][0], number] => {\n    const randomIndex = this.getRandomInt(0, availableCards.length);\n\n    return [availableCards[randomIndex], randomIndex];\n  };\n\n  private getRandomInt = (min: number, max: number) => {\n    return Math.floor(Math.random() * (max - min)) + min;\n  };\n\n  private getPairsCount = (pairs: IPlayer['pairs']): number => {\n    return pairs ? pairs.length : 0;\n  };\n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { App } from './App';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\n\nrender(\n  <App />,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}